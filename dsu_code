#include <iostream>
#include<vector>
#include<cmath>
#include<algorithm>
#include<unordered_set>
#include<unordered_map>
#include<set>
#include<list>
#include<queue>
using namespace std;
#define MAX 1000000007
#define ll long long int
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define REP(i,n) for(int i=0;i<n;i++)
ll BIT[26][100001];

void updatebit(ll i,char c,ll n,ll inc)
{  
    while(i<=n)
    {
        BIT[c-'a'][i]+=inc;
        i+=(i&-i);
    }
}
ll gcd(ll a ,ll b)
{
    if(b==0)return a;
    return gcd(b,a%b);
}
ll querybit(int j,ll i)
{  ll ans=0;
    while(i>0)
    {ans+=BIT[j][i];
        i-=(i&-i);
    }
    return ans;
}
struct comp{
    bool operator()(pair<int , int> a , pair<int , int> b){     
        if(a.second!=b.second)
          return (a.second < b.second);
        return a.first > b.first;
    }
  //set will now be ordered on the basis of the second elements i.e. marks in descending order.
};
bool compare2(pair<ll,ll> a,pair<ll,ll> b)
{
    if(a.second<b.second)return true;
    else if(a.second==b.second)
    {
        if(a.first<b.first)return true;
        return false;
    }
    return false;
}
bool compare1(pair<ll,ll> a,pair<ll,ll> b)
{
    if(a.first>b.first)
    return true;
    else if(a.first==b.first)
    {
        if(a.second<b.second)return true;
        return false;
    }
    return false;
}
struct DSU
{
	int connected;
	vector<int> par, sz;

	void init(int n) 
	{
		par = sz = vector<int> (n + 1, 0);
		for(int i = 1; i <= n; i++)
			par[i] = i, sz[i] = 1;
		connected = n;
	}

	int getPar(int u)
	{
		while(u != par[u])
		{
			par[u] = par[par[u]];
			u = par[u];
		}
		return u;
	}

	int getSize(int u)
	{
		return sz[getPar(u)];
	}

	void unite(int u, int v)
	{
		int par1 = getPar(u), par2 = getPar(v);

		if(par1 == par2)
			return;

		connected--;

		if(sz[par1] > sz[par2])
			swap(par1, par2);

		sz[par2] += sz[par1];
		sz[par1] = 0;
		par[par1] = par[par2];
	}
};

int main() {

int t;
t=1;
while(t--)
{
int n,m1,m2;
cin>>n>>m1>>m2;
DSU f1,f2;
f1.init(n);f2.init(n);
for(int i=0;i<m1;i++)
{
    ll x,y;
    cin>>x>>y;
    f1.unite(x,y);
}
for(int i=0;i<m2;i++)
{
    ll x,y;
    cin>>x>>y;
    f2.unite(x,y);
}
unordered_set<int> par1,par2;
for(int i=1;i<=n;i++)
{
    par1.insert(f1.getPar(i));
    par2.insert(f2.getPar(i));

}
/*unordered_set<int> ans;
for(auto it=par2.begin();it!=par2.end();it++)
{
   
   auto t1=f1.getPar(*it);
   if(par1.find(t1)!=par1.end());
   {
      ans.insert(t1);
   }
}
*/
vector<pair<int,int>> ans;
for(auto i:par1)
{
    for(auto j:par2)
    {
        if(f1.getPar(j)!=f1.getPar(i)&&f2.getPar(i)!=f2.getPar(j))
        {
            ans.pb({i,j});
            f1.unite(i,j);
             f2.unite(i,j);
            // f1.getPar(i);f1.getPar(j); f2.getPar(i);f2.getPar(j);
        }
    }
}
cout<<ans.size()<<endl;
for(auto i:ans)
{
    cout<<i.first<<" "<<i.second<<endl;
}
}
	return 0;
}
